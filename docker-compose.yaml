version: '3.8'
services:
  # rabbitmq:
  #   image: rabbitmq:3.12-management
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"  # Default port to communicate with RabbitMQ
  #     - "15672:15672"  # Interface management of RabbitMQ
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq  # Folder storage data of RabbitMQ
  #   restart: unless-stopped
  #   networks:
  #     - greenfeast
  
  apigateway: #name of service
    container_name: apigateway
    build:
      context: ./api-gateway/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27017 #27017 is port of service in Docker (not localhost)
      - DB_HOST=apiGatewayDB # database is service's name
      - FRONT_END_URL=http://localhost
      - ORDER_SERVICE_URL=http://order:5000
      - NOTIFICATION_SERVICE_URL=http://notification:5020
      - PAYMENT_SERVICE_URL=http://payment:5005
      - MANAGEMENT_SERVICE_URL=http://management:4000
      - TMS_SERVICE_URL=http://tms:5010
      - STATISTICS_SERVICE_URL=http://statistics:5030

      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 3000:3000 #The first 3000 is your port local, the second 3000 is the port on docker container
      # Any packets sent to port 27017 on the local machine will be forwarded to port 27017 in the docker container
    expose:
      - 3000
    networks:
      - apigateway-network
      - greenfeast

  # apiGatewayDB:
  #   container_name: apiGatewayDB
  #   image: mongo:6-jammy #image means pull image from Docker hub, while build is source in local
  #   restart: always
  #   environment: 
  #     MONGO_INITDB_DATABASE: api-gateway
  #     #MONGO_INITDB_ROOT_USERNAME: root
  #     #MONGO_INITDB_ROOT_PASSWORD: password
  #   ports:
  #     - 27017:27017
  #   expose: 
  #     - 27017 #This service will open port 27017 so that other containers can communicate
  #   volumes: # save data after container is deleted
  #     - dbdata6:/data/db
  #   networks:
  #     - apigateway-network
  #     - greenfeast

  nginxreact: 
    container_name: nginxreact
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API=http://apigateway:3000
    ports:
      - 80:80
    volumes: #override interface nginx default #copy file, folder from local computer to docker
      #../../frontend/build is path to front end source code (folder build)
      #/usr/share/nginx/html is path to interface nginx default 
      - ./frontend/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - apigateway-network
      - greenfeast
    depends_on:
      - apigateway
    expose:
      - 80

  management: #name of service
    container_name: management
    build:
      context: ./management-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: #override enviroment variable  (.env file)
      - DB_PORT=3306 #3306 is port of service in Docker (not localhost)
      - DB_HOST=managementDB # managementDB is service's name
      - AMQP_SERVER_URL_DOCKER=amqp://rabbitmq:5672

      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 4000:4000 #The first 4000 is your port local, the second 4000 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 4000
    # depends_on: #Start after rabbit mq run
    #   - rabbitmq
    networks:
      - greenfeast

  managementDB:
    container_name: managementDB
    image: mysql:8.0 #image means pull image from Docker hub, while build is source in local
    restart: always
    environment: 
      MYSQL_DATABASE: management_service
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    ports:
      - 3306:3306
    expose: 
      - 3306 #This service will open port 3306 so that other containers can communicate
    volumes: # save data after container is deleted
      - dbdata8:/data/mysql/db
      - ./management-service/database/management_service.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - greenfeast

  order: #name of service
    container_name: order
    build:
      context: ./order-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27018 #27018 is port of service in Docker (not localhost)
      - DB_HOST=orderDB # orderDB is service's name
      - AMQP_SERVER_URL_HOST=rabbitmq #rabbitmq is service's name of rabbit mq
      - AMQP_SERVER_URL_PORT=5672
      - AMQP_SERVER_URL_DOCKER=amqp://rabbitmq:5672
      - API_GATEWAY_URL=https://greenfeast.space
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5000:5000 #The first 5000 is your port local, the second 5000 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5000
    # depends_on: #Start after rabbit mq run
    #   - rabbitmq
    networks:
      - order-network
      - greenfeast

  # orderDB:
  #   container_name: orderDB
  #   image: mongo:6-jammy #image means pull image from Docker hub, while build is source in local
  #   restart: always
  #   environment: 
  #     MONGO_INITDB_DATABASE: order
  #     #MONGO_INITDB_ROOT_USERNAME: root
  #     #MONGO_INITDB_ROOT_PASSWORD: password
  #   ports:
  #     - 27018:27018
  #   command: mongod --port 27018 # !Important. This will change default port in mongo
  #   expose: 
  #     - 27018 #This service will open port 27018 so that other containers can communicate
  #   volumes: # save data after container is deleted
  #     - dbdata7:/data/db2
  #   networks:
  #     - order-network
  #     - greenfeast

  notification: #name of service
    container_name: notification
    build:
      context: ./notification-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27019 #27018 is port of service in Docker (not localhost)
      - DB_HOST=notificationDB # orderDB is service's name
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5020:5020 #The first 5020 is your port local, the second 5020 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5020
    # depends_on: #Start after rabbit mq run
    #   - rabbitmq
    networks:
      - order-network
      - greenfeast

  # notificationDB:
  #   container_name: notificationDB
  #   image: mongo:6-jammy #image means pull image from Docker hub, while build is source in local
  #   restart: always
  #   environment: 
  #     MONGO_INITDB_DATABASE: notification
  #     #MONGO_INITDB_ROOT_USERNAME: root
  #     #MONGO_INITDB_ROOT_PASSWORD: password
  #   ports:
  #     - 27019:27019
  #   command: mongod --port 27019 # !Important. This will change default port in mongo
  #   expose: 
  #     - 27019 #This service will open port 27019 so that other containers can communicate
  #   volumes: # save data after container is deleted
  #     - dbdata9:/data/db2
  #   networks:
  #     - greenfeast

  payment: #name of service
    container_name: payment
    build:
      context: ./payment-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27020 #27018 is port of service in Docker (not localhost)
      - DB_HOST=paymentDB # orderDB is service's name
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5005:5005 #The first 5005 is your port local, the second 5005 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5005
    # depends_on: #Start after rabbit mq run
    #   - rabbitmq
    networks:
      - order-network
      - greenfeast

  # paymentDB:
  #   container_name: paymentDB
  #   image: mongo:6-jammy #image means pull image from Docker hub, while build is source in local
  #   restart: always
  #   environment: 
  #     MONGO_INITDB_DATABASE: payment
  #     #MONGO_INITDB_ROOT_USERNAME: root
  #     #MONGO_INITDB_ROOT_PASSWORD: password
  #   ports:
  #     - 27020:27020
  #   command: mongod --port 27020 # !Important. This will change default port in mongo
  #   expose: 
  #     - 27020 #This service will open port 27020 so that other containers can communicate
  #   volumes: # save data after container is deleted
  #     - dbdata10:/data/db2
  #   networks:
  #     - greenfeast

  statistics: #name of service
    container_name: statistics
    build:
      context: ./statistics-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27021 #27018 is port of service in Docker (not localhost)
      - DB_HOST=statisticsDB # orderDB is service's name
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5030:5030 #The first 5030 is your port local, the second 5030 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5030
    # depends_on: #Start after rabbit mq run
    #   - rabbitmq
    networks:
      - greenfeast

  # statisticsDB:
  #   container_name: statisticsDB
  #   image: mongo:6-jammy #image means pull image from Docker hub, while build is source in local
  #   restart: always
  #   environment: 
  #     MONGO_INITDB_DATABASE: statistics
  #     #MONGO_INITDB_ROOT_USERNAME: root
  #     #MONGO_INITDB_ROOT_PASSWORD: password
  #   ports:
  #     - 27021:27021
  #   command: mongod --port 27021 # !Important. This will change default port in mongo
  #   expose: 
  #     - 27021 #This service will open port 27021 so that other containers can communicate
  #   volumes: # save data after container is deleted
  #     - dbdata11:/data/db2
  #   networks:
  #     - greenfeast

  tms: #name of service
    container_name: tms
    build:
      context: ./tms-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27022 #27018 is port of service in Docker (not localhost)
      - DB_HOST=tmsDB # orderDB is service's name
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5010:5010 #The first 5010 is your port local, the second 5010 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5010
    # depends_on: #Start after rabbit mq run
    #   - rabbitmq
    networks:
      - greenfeast

  # tmsDB:
  #   container_name: tmsDB
  #   image: mongo:6-jammy #image means pull image from Docker hub, while build is source in local
  #   restart: always
  #   environment: 
  #     MONGO_INITDB_DATABASE: tms
  #     #MONGO_INITDB_ROOT_USERNAME: root
  #     #MONGO_INITDB_ROOT_PASSWORD: password
  #   ports:
  #     - 27022:27022
  #   command: mongod --port 27022 # !Important. This will change default port in mongo
  #   expose: 
  #     - 27022 #This service will open port 27022 so that other containers can communicate
  #   volumes: # save data after container is deleted
  #     - dbdata12:/data/db2
  #   networks:
  #     - greenfeast

volumes:
  dbdata6:
  dbdata7:
  dbdata8:
  rabbitmq_data:
  dbdata9:
  dbdata10:
  dbdata11:
  dbdata12:

networks:
  apigateway-network:
    driver: bridge
  greenfeast:
    driver: bridge
    name: greenfeast
  order-network:
    driver: bridge

#docker compose -p greenfeast up -d --build

#up is build file (run container), d is detach, after install with be auto exit, --build is force build image again (for cicd)
#then open "Log" in container backend to see work log
#docker compose down --rmi all: stop all containers and remove images which created by docker compose