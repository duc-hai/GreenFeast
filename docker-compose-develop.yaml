version: '3.8'
services:
  apigateway: #name of service
    container_name: apigateway
    build:
      context: ./api-gateway/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27017 #27017 is port of service in Docker (not localhost)
      - DB_HOST=apiGatewayDB # database is service's name
      # - FRONT_END_URL=http://localhost
      - FRONT_END_URL=http://localhost
      - ORDER_SERVICE_URL=http://order:5000
      - NOTIFICATION_SERVICE_URL=http://notification:5020
      - PAYMENT_SERVICE_URL=http://payment:5005
      - MANAGEMENT_SERVICE_URL=http://management:4000
      - TMS_SERVICE_URL=http://tms:5010
      - STATISTICS_SERVICE_URL=http://statistics:5030
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GOOGLE_REDIRECT_URI=http://localhost/api/auth/google/callback
      - RECOMMEND_SERVICE_URL=http://recommend:5090
      - ORDER2_SERVICE_URL=http://order2:5001
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 3000:3000 #The first 3000 is your port local, the second 3000 is the port on docker container
      # Any packets sent to port 27017 on the local machine will be forwarded to port 27017 in the docker container
    expose:
      - 3000
    networks:
      - apigateway-network
      - greenfeast

  apigateway-mobile: #name of service
    container_name: apigateway-mobile
    build:
      context: ./api-gateway-mobile/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27017 #27017 is port of service in Docker (not localhost)
      - DB_HOST=apiGatewayDB # database is service's name
      # - FRONT_END_URL=http://localhost
      - FRONT_END_URL=http://localhost
      - ORDER_SERVICE_URL=http://order:5000
      - NOTIFICATION_SERVICE_URL=http://notification:5020
      - PAYMENT_SERVICE_URL=http://payment:5005
      - MANAGEMENT_SERVICE_URL=http://management:4000
      - TMS_SERVICE_URL=http://tms:5010
      - STATISTICS_SERVICE_URL=http://statistics:5030
      - ORDER2_SERVICE_URL=http://order2:5001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GOOGLE_REDIRECT_URI=https://greenfeast.space/api-mobile/auth/google/callback
      - RECOMMEND_SERVICE_URL=http://recommend:5090
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 3003:3003 #The first 3000 is your port local, the second 3000 is the port on docker container
      # Any packets sent to port 27017 on the local machine will be forwarded to port 27017 in the docker container
    expose:
      - 3003
    networks:
      - apigateway-network
      - greenfeast

  notification: #name of service
    container_name: notification
    build:
      context: ./notification-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27019 #27018 is port of service in Docker (not localhost)
      - DB_HOST=notificationDB # orderDB is service's name
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5020:5020 #The first 5020 is your port local, the second 5020 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5020
    # depends_on: 
    #   - apigateway
      # - rabbitmq #Start after rabbit mq run
    networks:
      - order-network
      - greenfeast

  nginxreact: 
    container_name: nginxreact
    build: 
      context: ./frontend
      dockerfile: DockerfileDev
    restart: always
    # environment:
    #   - REACT_APP_API=http://localhost
    ports:
      - 80:80
    volumes: #override interface nginx default #copy file, folder from local computer to docker
      #../../frontend/build is path to front end source code (folder build)
      #/usr/share/nginx/html is path to interface nginx default 
      - ./frontend/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - apigateway-network
      - greenfeast
    # depends_on:
    #   - notification
    expose:
      - 80

  management: #name of service
    container_name: management
    build:
      context: ./management-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=3306 #3306 is port of service in Docker (not localhost)
      - DB_HOST=managementDB # managementDB is service's name
      - AMQP_SERVER_URL_DOCKER=amqp://rabbitmq:5672

      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 4000:4000 #The first 4000 is your port local, the second 4000 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 4000
    depends_on: 
      - nginxreact
    networks:
      - greenfeast

  managementDB:
    container_name: managementDB
    image: mysql:8.0 #image means pull image from Docker hub, while build is source in local
    restart: always
    environment: 
      MYSQL_DATABASE: management_service
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    ports:
      - 3306:3306
    expose: 
      - 3306 #This service will open port 3306 so that other containers can communicate
    volumes: # save data after container is deleted
      - dbdata8:/var/lib/mysql
      - ./management-service/database/management_service.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - greenfeast

  order: #name of service
    container_name: order
    build:
      context: ./order-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27018 #27018 is port of service in Docker (not localhost)
      - DB_HOST=orderDB # orderDB is service's name
      - AMQP_SERVER_URL_HOST=rabbitmq #rabbitmq is service's name of rabbit mq
      - AMQP_SERVER_URL_PORT=5672
      - AMQP_SERVER_URL_DOCKER=amqp://rabbitmq:5672
      - API_GATEWAY_URL=http://localhost
      - FRONT_END_URL_QRCODE=http://localhost
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5000:5000 #The first 5000 is your port local, the second 5000 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5000
    depends_on: 
      - management
    networks:
      - order-network
      - greenfeast

  order2: #name of service
    container_name: order2
    build:
      context: ./order-service-2/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27018 #27018 is port of service in Docker (not localhost)
      - DB_HOST=orderDB # orderDB is service's name
      - AMQP_SERVER_URL_HOST=rabbitmq #rabbitmq is service's name of rabbit mq
      - AMQP_SERVER_URL_PORT=5672
      - AMQP_SERVER_URL_DOCKER=amqp://rabbitmq:5672
      - API_GATEWAY_URL=http://localhost
      - FRONT_END_URL_QRCODE=http://localhost
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5001:5001 #The first 5000 is your port local, the second 5000 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5001
    depends_on: 
      - management
    networks:
      - order-network
      - greenfeast

  payment: #name of service
    container_name: payment
    build:
      context: ./payment-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27020 #27018 is port of service in Docker (not localhost)
      - DB_HOST=paymentDB # orderDB is service's name
      - vnp_ReturnUrl=http://localhost/payment/vnpay_return
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5005:5005 #The first 5005 is your port local, the second 5005 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5005
    depends_on: 
      - order
    networks:
      - order-network
      - greenfeast

  statistics: #name of service
    container_name: statistics
    build:
      context: ./statistics-service/backend #path to source backend (local)
      dockerfile: Dockerfile
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27021 #27018 is port of service in Docker (not localhost)
      - DB_HOST=statisticsDB # orderDB is service's name
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5030:5030 #The first 5030 is your port local, the second 5030 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5030
    depends_on: 
      - payment
    networks:
      - greenfeast

  tms: #name of service
    container_name: tms
    build:
      context: ./tms-service/backend #path to source backend (local)
      dockerfile: DockerfileDev
    restart: always
    environment: #override enviroment variable  (.env file)
      - DB_PORT=27022 #27018 is port of service in Docker (not localhost)
      - DB_HOST=tmsDB # orderDB is service's name
      - API_GATEWAY_URL=http://localhost/api/tms
      # - DB_HOST=host.docker.internal #it's means 'localhost' in Docker
    ports: 
      - 5010:5010 #The first 5010 is your port local, the second 5010 is the port on docker container
      # Any packets sent to port 27018 on the local machine will be forwarded to port 27018 in the docker container
    expose:
      - 5010
    depends_on: 
      - statistics
    networks:
      - greenfeast
      
  recommend:
    container_name: recommend
    build: 
      context: ./recommend-service/backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5090:5090
    depends_on:
      - tms
    expose:
      - 5090
    networks:
      - greenfeast

volumes:
  dbdata8:

networks:
  apigateway-network:
    driver: bridge
  greenfeast:
    driver: bridge
    name: greenfeast
  order-network:
    driver: bridge

#     docker compose -f docker-compose-develop.yaml -p greenfeast up -d --build

#up is build file (run container), d is detach, after install with be auto exit, --build is force build image again (for cicd)
#then open "Log" in container backend to see work log
#docker compose down --rmi all: stop all containers and remove images which created by docker compose